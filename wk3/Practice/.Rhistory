library(terra)
library(tidyverse)
library(sf)
shape <- st_read("gadm41_AUS_shp/gadm41_AUS_0.shx")
View(shape)
shape <- st_read("gadm41_AUS_shp/gadm41_AUS_0.shp")
View(shape)
shape1 <- st_read("gadm41_AUS_shp/gadm41_AUS_1.shp")
View(shape1)
shape2 <- st_read("gadm41_AUS_shp/gadm41_AUS_2.shp")
View(shape2)
rm(shape1,shape2)
plot(shape$geometry)
#we can simplify it first
#dTolerance controls the level of generalisation
AusoutSIMPLE <- shape %>%
st_simplify(., dTolerance = 2000) %>%
st_geometry() %>%
plot()
ras <- terra::rast('wc2.1_2.5m_tmax_ACCESS-CM2_ssp370_2021-2040.tif')
names(ras)
plot(ras$tmax08)
site <- c("Brisbane", "Melbourne", "Perth", "Sydney", "Broome", "Darwin", "Orange",
"Bunbury", "Cairns", "Adelaide", "Gold Coast", "Canberra", "Newcastle",
"Wollongong", "Logan City" )
lon <- c(153.03, 144.96, 115.86, 151.21, 122.23, 130.84, 149.10, 115.64, 145.77,
138.6, 153.43, 149.13, 151.78, 150.89, 153.12)
lat <- c(-27.47, -37.91, -31.95, -33.87, 17.96, -12.46, -33.28, -33.33, -16.92,
-34.93, -28, -35.28, -32.93, -34.42, -27.64)
#Put all of this inforamtion into one list
samples <- data.frame(site, lon, lat, row.names="site")
View(samples)
site <- c("Brisbane", "Melbourne", "Perth", "Sydney", "Broome", "Darwin", "Orange",
"Bunbury", "Cairns", "Adelaide", "Gold Coast", "Canberra", "Newcastle",
"Wollongong", "Logan City" )
lon <- c(153.03, 144.96, 115.86, 151.21, 122.23, 130.84, 149.10, 115.64, 145.77,
138.6, 153.43, 149.13, 151.78, 150.89, 153.12)
lat <- c(-27.47, -37.91, -31.95, -33.87, 17.96, -12.46, -33.28, -33.33, -16.92,
-34.93, -28, -35.28, -32.93, -34.42, -27.64)
#Put all of this inforamtion into one list
samples <- data.frame(site, lon, lat)
View(samples)
site <- c("Brisbane", "Melbourne", "Perth", "Sydney", "Broome", "Darwin", "Orange",
"Bunbury", "Cairns", "Adelaide", "Gold Coast", "Canberra", "Newcastle",
"Wollongong", "Logan City" )
lon <- c(153.03, 144.96, 115.86, 151.21, 122.23, 130.84, 149.10, 115.64, 145.77,
138.6, 153.43, 149.13, 151.78, 150.89, 153.12)
lat <- c(-27.47, -37.91, -31.95, -33.87, 17.96, -12.46, -33.28, -33.33, -16.92,
-34.93, -28, -35.28, -32.93, -34.42, -27.64)
#Put all of this inforamtion into one list
samples <- data.frame(site, lon, lat, row.names="site")
View(samples)
AUcitypre <- terra::extract(ras, samples)
View(AUcitypre)
View(AUcitypre)
ras <- terra::rast('wc2.1_2.5m_tmax_ACCESS-CM2_ssp370_2021-2040.tif')
# plot(ras)
plot(ras$tmax08)
site <- c("Brisbane", "Melbourne", "Perth", "Sydney", "Broome", "Darwin", "Orange",
"Bunbury", "Cairns", "Adelaide", "Gold Coast", "Canberra", "Newcastle",
"Wollongong", "Logan City" )
lon <- c(153.03, 144.96, 115.86, 151.21, 122.23, 130.84, 149.10, 115.64, 145.77,
138.6, 153.43, 149.13, 151.78, 150.89, 153.12)
lat <- c(-27.47, -37.91, -31.95, -33.87, 17.96, -12.46, -33.28, -33.33, -16.92,
-34.93, -28, -35.28, -32.93, -34.42, -27.64)
#Put all of this inforamtion into one list
samples <- data.frame(site, lon, lat, row.names="site")
AUcitypre <- terra::extract(ras, samples)
View(AUcitypre)
View(AUcitypre)
#Add the city names to the rows of AUcitytemp
AUcitypre2 <- AUcitypre %>%
as_tibble()%>%
add_column(Site = site, .before = "tmax01")
View(AUcitypre2)
class(AUcitypre)
class(AUcitypre2)
View(AUcitypre2)
View(AUcitypre2)
Melbournetmax <- AUcitypre2 %>%
filter(Site=="Melbourne") %>%
select(tmax01:tmax02)
View(Melbournetmax)
Melbournetmax <- AUcitypre2 %>%
filter(Site=="Melbourne") %>%
select(tmax01:tmax12)
View(Melbournetmax)
hist(as.numeric(Melbournetmax),
col="red",
main="xxx",
xlab="monthly max temperature",
ylab="frequency"
)
ras
names(ras)
#We can also rename our layers within the stack:
month <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
#rename() from the dplyr package isn’t yet available for raster data
names(ras <- month)
ras
ras <- terra::rast('wc2.1_2.5m_tmax_ACCESS-CM2_ssp370_2021-2040.tif')
print(shape)
crs(ras)
#Perfect! Now let’s continue…
Austempmax <- shape %>%
# now crop our temp data to the extent
terra::crop(ras,.) #crop() 函数用于裁剪栅格数据
plot(Melbournetmax)
plot(Austempmax)
plot(Austempmax[[1]])
#get raster data within the outline of the shape
exactAus<-terra::mask(ras, shape)
plot(exactAus[[1]])
#subset using the known location of the raster
hist(exactAus[[3]], col="red", main ="March temperature")
exactAus<-terra::mask(ras, shape)
plot(exactAus)
exactAusdf <- exactAus %>%
as.data.frame()
#subset using the known location of the raster
hist(exactAus[[3]], col="red", main ="March temperature")
View(exactAus)
exactAusdf <- exactAus %>%
as.data.frame()
exactAusdf <- exactAus %>%
as.data.frame()
View(exactAusdf)
library(ggplot2)
# set up the basic histogram
gghist <- ggplot(exactAusdf,
aes(x=Mar)) +
geom_histogram(color="black",
fill="white")+
labs(title="Ggplot2 histogram of Australian March temperatures",
x="Temperature",
y="Frequency")
# add a vertical line to the hisogram showing mean tempearture
gghist + geom_vline(aes(xintercept=mean(Mar,
na.rm=TRUE)),
color="blue",
linetype="dashed",
size=1)+
theme(plot.title = element_text(hjust = 0.5))
exactAusdf
library(ggplot2)
# set up the basic histogram
gghist <- ggplot(exactAusdf,
aes(x=tmax03)) +
geom_histogram(color="black",
fill="white")+
labs(title="Ggplot2 histogram of Australian March temperatures",
x="Temperature",
y="Frequency")
# add a vertical line to the hisogram showing mean tempearture
gghist + geom_vline(aes(xintercept=mean(Mar,
na.rm=TRUE)),
color="blue",
linetype="dashed",
size=1)+
theme(plot.title = element_text(hjust = 0.5))
library(ggplot2)
# set up the basic histogram
gghist <- ggplot(exactAusdf,
aes(x=tmax03)) +
geom_histogram(color="black",
fill="white")+
labs(title="Ggplot2 histogram of Australian March temperatures",
x="Temperature",
y="Frequency")
# add a vertical line to the hisogram showing mean tempearture
gghist + geom_vline(aes(xintercept=mean(tmax03,
na.rm=TRUE)),
color="blue",
linetype="dashed",
size=1)+
theme(plot.title = element_text(hjust = 0.5))
shape
shape <- shape %>%
st_transform(.,4326)
shape
ras
ras <- ras %>%
terra::project(.,"EPSG:54009")
View(AUcitypre)
View(AUcitypre2)
View(AUcitypre2)
View(AUcitypre)
crs(ras)
class(ras)
plot(Austempmax[[1]])
plot(Austempmax)
exactAus<-terra::mask(ras, shape)
plot(exactAus)
hist(exactAus[[3]], col="red", main ="March temperature")
hist(Austempmax[[3]], col="red", main ="March temperature")
exactAusdf <- Austempmax %>%
as.data.frame()
View(exactAusdf)
library(ggplot2)
# set up the basic histogram
gghist <- ggplot(exactAusdf,
aes(x=tmax03)) +
geom_histogram(color="black",
fill="white")+
labs(title="Ggplot2 histogram of Australian March temperatures",
x="Temperature",
y="Frequency")
# add a vertical line to the hisogram showing mean tempearture
gghist + geom_vline(aes(xintercept=mean(tmax03,
na.rm=TRUE)),
color="blue",
linetype="dashed",
size=1)+
theme(plot.title = element_text(hjust = 0.5))
View(AUcitypre)
ras
names(exactAusdf)
names(exactAusdf) <- month
names(exactAusdf)
colnames(exactAusdf)
#plotting multiple months of temperature data
#select columns 1-12 (all the months) and place them in a new column called Month
squishdata <- exactAusdf %>%
pivot_longer(
cols = 1:12,
names_to = "Month",
values_to = "Temp"
)
View(squishdata)
#selecting two months using filter() from dplyr
twomonths <- squishdata %>%
filter(., Month=="Jan" || Month=="Jun")
twomonths <- squishdata %>%
filter(., Month=="Jan" | Month=="Jun")
mean_two_month <- twomonths %>%
group_by(Month) %>%
summarise(Mean=mean(Temp, na.rm=TRUE))
View(mean_two_month)
mean_two_month <- twomonths %>%
group_by(Month) %>%
summarise(Mean=mean(Temp))
View(mean_two_month)
, na.rm=TRUE
mean_two_month <- twomonths %>%
group_by(Month) %>%
summarise(Mean=mean(Temp, na.rm=TRUE))
ggplot(twomonths, aes(x=Temp, colour=Month, fill=Month))+
geom_histogram(position = "identity", alpha=0.5)+
geom_vline(data = mean_two_month,
aes(xintercept = Mean, color = Month),
linetype="dashed")
#Select the colour and fill based on the variable
ggplot(twomonths, aes(x=Temp, colour=Month, fill=Month))+
geom_histogram(position = "identity", alpha=0.5)+
geom_vline(data = mean_two_month,
aes(xintercept = Mean, color = Month),
linetype="dashed")+
labs(title = "ggplot2 histogram of australian jan and jun temperatures",
x="temperature",
y = "frequency")
#Select the colour and fill based on the variable
ggplot(twomonths, aes(x=Temp, colour=Month, fill=Month))+
geom_histogram(position = "identity", alpha=0.5)+
geom_vline(data = mean_two_month,
aes(xintercept = Mean, color = Month),
linetype="dashed")+
labs(title = "ggplot2 histogram of australian jan and jun temperatures",
x="temperature",
y = "frequency")+
theme_classic()+
theme(plot.title = element_text(hjust = 0.5))
View(squishdata)
####################################################
data_complete_cases <- squishdata %>%
drop_na()%>%
mutate(Month = factor(Month, levels = c("Jan","Feb","Mar",
"Apr","May","Jun",
"Jul","Aug","Sep",
"Oct","Nov","Dec")))
View(data_complete_cases)
squishdata
data_complete_cases
summary(squishdata)
summary(data_complete_cases)
# Plot faceted histogram
ggplot(data_complete_cases, aes(x=Temp, na.rm=TRUE))+
geom_histogram(color="black", binwidth = 5)+
labs(title = "ggplot2 faceted histogram of Australian temperatures",
x = "Temperature",
y = "Frequency")
View(squishdata)
# Plot faceted histogram
ggplot(data_complete_cases, aes(x=Temp, na.rm=TRUE))+
geom_histogram(color="black", binwidth = 5)+
labs(title = "ggplot2 faceted histogram of Australian temperatures",
x = "Temperature",
y = "Frequency")+
facet_grid(Month ~ .)+ #对图形进行分面，每个月份将单独生成一个子图
theme(plot.title = element_text(hjust = 0.5))
#How about an interactive histogram using plotly…
library(plotly)
# split the data for plotly based on month
View(exactAusdf)
jan <- squishdata %>%
drop_na() %>%
filter(., Month="Jan")
jan <- squishdata %>%
drop_na() %>%
filter(., Month=="Jan")
View(jan)
jun <- squishdata %>%
drop_na() %>%
filter(., Month=="Jun")
# give axis titles
x <- list (title = "Temperature")
y <- list (title = "Frequency")
View(x)
x
#set the binwidth
xbinsno <- list(star=0, end=40, size=2.5)
xbinsno
summary(xbinsno)
View(xbinsno)
View(jan)
ihist <- plot_ly(alpha = 0.6) %>%
add_histogram(x=jan$Temp,
xbins=xbinsno, name="January") %>%
add_histogram(x=jun$Temp,
xbins=xbinsno, name="June")
ihist
# plot the histogram calling all the variables we just set
ihist <- plot_ly(alpha = 0.6) %>%
add_histogram(x=jan$Temp,
xbins=xbinsno, name="January") %>%
add_histogram(x=jun$Temp,
xbins=xbinsno, name="June") %>%
layout(barmode="overlay", xaxis=x, yaxis=y)
ihist
###############################
#mean per month
meanofall <- squishdata %>%
group_by(Month) %>%
summarise(Mean=mean(Temp, na.rm=TRUE))
View(meanofall)
# standard deviation per month
sdofall <- squishdata %>%
group_by(Month) %>%
summarise(Sd=sd(Temp, na.rm=TRUE))
sdofall
# perhaps you want to store multiple outputs in one list..
lotofstats <- squishdata %>%
group_by(Month) %>%
summarise(IQR=IQR(Temp, na.rm=TRUE),
Max=max(Temp, na.rm=TRUE))
View(lotofstats)
#whole year
meanwholeyear <- squishdata %>%
summarise(Meanyear=mean(Temp, na,rm=TRUE))
#whole year
meanwholeyear <- squishdata %>%
summarise(Meanyear=mean(Temp, na.rm=TRUE))
View(meanwholeyear)
