max=max(Temp, na.rm=T))
# or you want to know the mean (or some other stat)
#for the whole year as opposed to each month...
meanwholeyear=squishdata %>%
summarize(meanyear = mean(Temp, na.rm=TRUE))
View(maxofall)
View(sdofall)
View(lotsofstats)
View(meanwholeyear)
gc()
which git
git --version
install.packages("usethis")
library(usethis)
class(world)
worldclimtemp
plot(world)
library(sf)
library(here)
st_layers(here("gadm36_AUS_gpkg", "gadm36_AUS.gpkg"))
st_layers("gadm36_AUS_gpkg/gadm36_AUS.gpkg")
library(sf)
Ausoutline <- st_read(here("gadm36_AUS_gpkg", "gadm36_AUS.gpkg"),
layer='gadm36_AUS_0')
View(Ausoutline)
View(Ausoutline[[3]][[1]])
print(Ausoutline)
library(sf)
st_crs(Ausoutline)$proj4string
Ausoutline
print(Ausoutline)
AusoutlinePROJECTED <- Ausoutline %>%
st_transform(.,3112)
print(AusoutlinePROJECTED)
library(terra)
jan<-terra::rast(here("wc2.1_5m_tavg", "wc2.1_5m_tavg_01.tif"))
# have a look at the raster layer jan
jan
View(jan)
summary(jan)
print(jan)
plot(jan)
pr1 <- jan %>%
terra::project(., "ESRI:54009")
pr1 <- pr1 %>%
terra::project(., "ESRI:54009")
pr1 <- jan %>%
terra::project(., "ESRI:54009")
plot(pr1)
library(tidyverse)
listfiles<-dir_info("wc2.1_5m_tavg") %>%
filter(str_detect(path, ".tif")) %>%
dplyr::select(path)%>%
library(tidyverse)
listfiles<-dir_info("wc2.1_5m_tavg") %>%
filter(str_detect(path, ".tif")) %>%
dplyr::select(path)
library(fs)
library(tidyverse)
listfiles<-dir_info("wc2.1_5m_tavg") %>%
filter(str_detect(path, ".tif")) %>%
dplyr::select(path)
View(listfiles)
listfiles
library(tidyverse)
listfiles<-dir_info("wc2.1_5m_tavg") %>%
filter(str_detect(path, ".tif")) %>%
dplyr::select(path)%>%
pull()
#have a look at the file names
listfiles
View(Ausoutline)
#A SpatRaster is a collection of raster layers with
#the same spatial extent and resolution.
worldclimtemp <- listfiles %>%
terra::rast()
#have a look at the raster stack
worldclimtemp
View(worldclimtemp)
worldclimtemp@ptr
# access the january layer
worldclimtemp[[1]]
# access the january layer
worldclimtemp[1]
View(worldclimtemp)
#We can also rename our layers within the stack:
month <- c("Jan", "Feb", "Mar", "Apr", "May", "Jun",
"Jul", "Aug", "Sep", "Oct", "Nov", "Dec")
#rename() from the dplyr package isn’t yet available for raster data
names(worldclimtemp) <- month
#have a look at the raster stack
worldclimtemp
# access the january layer
worldclimtemp[[1]]
#Now to get data for just January use our new layer name
worldclimtemp$Jan
#let’s make a dataframe of some sample sites — Australian cities/towns.
site <- c("Brisbane", "Melbourne", "Perth", "Sydney", "Broome", "Darwin", "Orange",
"Bunbury", "Cairns", "Adelaide", "Gold Coast", "Canberra", "Newcastle",
"Wollongong", "Logan City" )
lon <- c(153.03, 144.96, 115.86, 151.21, 122.23, 130.84, 149.10, 115.64, 145.77,
138.6, 153.43, 149.13, 151.78, 150.89, 153.12)
lat <- c(-27.47, -37.91, -31.95, -33.87, 17.96, -12.46, -33.28, -33.33, -16.92,
-34.93, -28, -35.28, -32.93, -34.42, -27.64)
#Put all of this inforamtion into one list
samples <- data.frame(site, lon, lat, row.names="site")
View(samples)
View(worldclimtemp)
plot(worldclimtemp)
plot(Ausoutline)
AUcitytemp<- terra::extract(worldclimtemp, samples)
plot(AUcitytemp)
View(AUcitytemp)
Aucitytemp2 <- AUcitytemp %>%
as_tibble()%>%
add_column(Site = site, .before = "Jan")
View(Aucitytemp2)
AUcitytemp
View(worldclimtemp)
print(worldclimtemp)
View(Aucitytemp2)
AUcitytemp
Aucitytemp2
Perthtemp <- Aucitytemp2 %>%
filter(site=="Perth")
View(Perthtemp)
#Make a histogram of Perth’s temperature.
hist(as.numeric(Perthtemp))
#That’s a pretty simple histogram, let’s improve the aesthetics a bit.
library(tidyverse)
#define where you want the breaks in the historgram
userbreak <- c(8,10,12,14,16,18,20,22,24,26)
t<-Perthtemp %>%
dplyr::select(Jan:Dec)
View(t)
hist((as.numeric(t)),
breaks=userbreak,
col="red",
main="Histogram of Perth Temperature",
xlab="Temperature",
ylab="Frequency")
t
histinfo <- as.numeric(t) %>%
as.numeric()%>%
hist(.)
histinfo
View(histinfo)
histinfo
spec(histinfo)
View(Ausoutline)
#Using more data
plot(Ausoutline$geom)
print(Ausoutline)
crs(worldclimtemp)
worldclimtemp
View(histinfo)
View(Ausoutline)
plot(Ausoutline)
plot(worldclimtemp)
#Perfect! Now let’s continue…
Austemp <- Ausoutline %>%
# now crop our temp data to the extent
terra::crop(worldclimtemp,.)
# plot the output
plot(Austemp)
plot(Ausoutline)
plot(worldclimtemp)
#Perfect! Now let’s continue…
Austemp <- Ausoutline %>%
# now crop our temp data to the extent
terra::crop(worldclimtemp,.)
# plot the output
plot(Austemp)
exactAus<-terra::mask(Austemp, Ausoutline)
plot(exactAus)
View(exactAus)
#subset using the known location of the raster
hist(exactAus[[3]], col="red", main ="March temperature")
exactAus
exactAusdf <- exactAus %>%
as.data.frame()
exactAus
library(ggplot2)
# set up the basic histogram
gghist <- ggplot(exactAusdf,
aes(x=Mar)) +
geom_histogram(color="black",
fill="white")+
labs(title="Ggplot2 histogram of Australian March temperatures",
x="Temperature",
y="Frequency")
plot(gghist)
View(gghist)
gghist <- ggplot(exactAusdf,
aes(x=Mar)) +
geom_histogram(color="black",
fill="white")+
labs(title="Ggplot2 histogram of Australian March temperatures",
x="Temperature",
y="Frequency")
# add a vertical line to the hisogram showing mean tempearture
gghist + geom_vline(aes(xintercept=mean(Mar,
na.rm=TRUE)),
color="blue",
linetype="dashed",
size=1)
gghist <- ggplot(exactAusdf,
aes(x=Mar)) +
geom_histogram(color="black",
fill="white")+
labs(title="Ggplot2 histogram of Australian March temperatures",
x="Temperature",
y="Frequency")
# add a vertical line to the hisogram showing mean tempearture
gghist + geom_vline(aes(xintercept=mean(Mar,
na.rm=TRUE)),
color="blue",
linetype="dashed",
size=1)+
theme(plot.title = element_text(hjust = 0.5))
#in a new column called Month
squishdata<-exactAusdf%>%
pivot_longer(
cols = 1:12,
names_to = "Month",
values_to = "Temp"
)
View(squishdata)
View(exactAusdf)
#selecting two months using filter() from dplyr
twomonths <- squishdata %>%
# | = OR
filter(., Month=="Jan" | Month=="Jun")
meantwomonths <- twomonths %>%
group_by(Month) %>%
summarise(mean=mean(Temp, na.rm=TRUE))
View(meantwomonths)
meantwomonths
View(twomonths)
ggplot(twomonths, aes(x=Temp, color=Month, fill=Month)) +
geom_histogram(position="identity", alpha=0.5)+
geom_vline(data=meantwomonths,
aes(xintercept=mean,
color=Month),
linetype="dashed")+
labs(title="Ggplot2 histogram of Australian Jan and Jun
temperatures",
x="Temperature",
y="Frequency")
ggplot(twomonths, aes(x=Temp, color=Month, fill=Month)) +
geom_histogram(position="identity", alpha=0.5)+
geom_vline(data=meantwomonths,
aes(xintercept=mean,
color=Month),
linetype="dashed")+
labs(title="Ggplot2 histogram of Australian Jan and Jun
temperatures",
x="Temperature",
y="Frequency")+
theme_classic()+
theme(plot.title = element_text(hjust = 0.5))
ggplot(twomonths, aes(x=Temp, color=Month, fill=Month)) +
geom_histogram(position="identity", alpha=0.5)+
geom_vline(data=meantwomonths,
aes(xintercept=mean,
color=Month),
linetype="dashed")+
labs(title="Ggplot2 histogram of Australian Jan and Jun
temperatures",
x="Temperature",
y="Frequency")
ggplot(twomonths, aes(x=Temp, color=Month)) +
geom_histogram(position="identity", alpha=0.5)+
geom_vline(data=meantwomonths,
aes(xintercept=mean,
color=Month),
linetype="dashed")+
labs(title="Ggplot2 histogram of Australian Jan and Jun
temperatures",
x="Temperature",
y="Frequency")
ggplot(twomonths, aes(x=Temp, fill=Month)) +
geom_histogram(position="identity", alpha=0.5)+
geom_vline(data=meantwomonths,
aes(xintercept=mean,
color=Month),
linetype="dashed")+
labs(title="Ggplot2 histogram of Australian Jan and Jun
temperatures",
x="Temperature",
y="Frequency")
ggplot(twomonths, aes(x=Temp, color=Month, fill=Month)) +
geom_histogram(position="identity", alpha=0.5)+
geom_vline(data=meantwomonths,
aes(xintercept=mean,
color=Month),
linetype="dashed")+
labs(title="Ggplot2 histogram of Australian Jan and Jun
temperatures",
x="Temperature",
y="Frequency")
ggplot(twomonths, aes(x=Temp, color=Month, fill=Month)) +
geom_histogram(alpha=0.5)+
geom_vline(data=meantwomonths,
aes(xintercept=mean,
color=Month),
linetype="dashed")+
labs(title="Ggplot2 histogram of Australian Jan and Jun
temperatures",
x="Temperature",
y="Frequency")
ggplot(twomonths, aes(x=Temp, color=Month, fill=Month)) +
geom_histogram(position="identity", alpha=0.5)+
geom_vline(data=meantwomonths,
aes(xintercept=mean,
color=Month),
linetype="dashed")+
labs(title="Ggplot2 histogram of Australian Jan and Jun
temperatures",
x="Temperature",
y="Frequency")
ggplot(twomonths, aes(x=Temp, color=Month, fill=Month)) +
geom_histogram(alpha=0.5)+
geom_vline(data=meantwomonths,
aes(xintercept=mean,
color=Month),
linetype="dashed")+
labs(title="Ggplot2 histogram of Australian Jan and Jun
temperatures",
x="Temperature",
y="Frequency")
ggplot(twomonths, aes(x=Temp, color=Month, fill=Month)) +
geom_histogram(position="identity", alpha=0.5)+
geom_vline(data=meantwomonths,
aes(xintercept=mean,
color=Month),
linetype="dashed")+
labs(title="Ggplot2 histogram of Australian Jan and Jun
temperatures",
x="Temperature",
y="Frequency")
ggplot(twomonths, aes(x=Temp, color=Month, fill=Month)) +
geom_histogram(position="identity")+
geom_vline(data=meantwomonths,
aes(xintercept=mean,
color=Month),
linetype="dashed")+
labs(title="Ggplot2 histogram of Australian Jan and Jun
temperatures",
x="Temperature",
y="Frequency")
ggplot(twomonths, aes(x=Temp, color=Month, fill=Month)) +
geom_histogram(position="identity", alpha=0.5)+
geom_vline(data=meantwomonths,
aes(xintercept=mean,
color=Month),
linetype="dashed")+
labs(title="Ggplot2 histogram of Australian Jan and Jun
temperatures",
x="Temperature",
y="Frequency")
View(t)
data_complete_cases <- squishdata %>%
drop_na()%>%
mutate(Month = factor(Month, levels = c("Jan","Feb","Mar",
"Apr","May","Jun",
"Jul","Aug","Sep",
"Oct","Nov","Dec")))
View(data_complete_cases)
squishdata
data_complete_cases
squishdata$Month
data_complete_cases$Month
# Plot faceted histogram
ggplot(data_complete_cases, aes(x=Temp, na.rm=TRUE))+
geom_histogram(color="black", binwidth = 5)+
labs(title="Ggplot2 faceted histogram of Australian temperatures",
x="Temperature",
y="Frequency")+
facet_grid(Month ~ .)+
theme(plot.title = element_text(hjust = 0.5))
# Plot faceted histogram
ggplot(data_complete_cases, aes(x=Temp, na.rm=TRUE))+
geom_histogram(color="black", binwidth = 30)+
labs(title="Ggplot2 faceted histogram of Australian temperatures",
x="Temperature",
y="Frequency")+
facet_grid(Month ~ .)+
theme(plot.title = element_text(hjust = 0.5))
# Plot faceted histogram
ggplot(data_complete_cases, aes(x=Temp, na.rm=TRUE))+
geom_histogram(color="black", binwidth = 5)+
labs(title="Ggplot2 faceted histogram of Australian temperatures",
x="Temperature",
y="Frequency")+
facet_grid(Month ~ .)+
theme(plot.title = element_text(hjust = 0.5))
# Plot faceted histogram
ggplot(data_complete_cases, aes(x=Temp, na.rm=TRUE))+
geom_histogram(color="black", binwidth = 5)+
labs(title="Ggplot2 faceted histogram of Australian temperatures",
x="Temperature",
y="Frequency")
# Plot faceted histogram
ggplot(data_complete_cases, aes(x=Temp, na.rm=TRUE))+
geom_histogram(color="black", binwidth = 5)+
labs(title="Ggplot2 faceted histogram of Australian temperatures",
x="Temperature",
y="Frequency")+
facet_grid(Month ~ .)
# Plot faceted histogram
ggplot(data_complete_cases, aes(x=Temp, na.rm=TRUE))+
geom_histogram(color="black", binwidth = 5)+
labs(title="Ggplot2 faceted histogram of Australian temperatures",
x="Temperature",
y="Frequency")+
facet_grid(Month ~ .)+
theme(plot.title = element_text(hjust = 0.5))
# Plot faceted histogram
ggplot(data_complete_cases, aes(x=Temp, na.rm=TRUE))+
geom_histogram(color="black", binwidth = 5)+
labs(title="Ggplot2 faceted histogram of Australian temperatures",
x="Temperature",
y="Frequency")+
facet_grid(Month ~ .)
# Plot faceted histogram
ggplot(data_complete_cases, aes(x=Temp, na.rm=TRUE))+
geom_histogram(color="black", binwidth = 5)+
labs(title="Ggplot2 faceted histogram of Australian temperatures",
x="Temperature",
y="Frequency")+
facet_grid(Month ~ .)+
theme(plot.title = element_text(hjust = 0.5))
squishdata %>%
filter(.,Temp==na)
#How about an interactive histogram using plotly…
ibrary(plotly)
#How about an interactive histogram using plotly…
library(plotly)
# split the data for plotly based on month
jan <- squishdata %>%
drop_na() %>%
filter(., Month=="Jan")
jun <- squishdata %>%
drop_na() %>%
filter(., Month=="Jun")
# give axis titles
x <- list (title = "Temperature")
y <- list (title = "Frequency")
# set the bin width
xbinsno<-list(start=0, end=40, size = 2.5)
# plot the histogram calling all the variables we just set
ihist<-plot_ly(alpha = 0.6) %>%
add_histogram(x = jan$Temp,
xbins=xbinsno, name="January") %>%
add_histogram(x = jun$Temp,
xbins=xbinsno, name="June") %>%
layout(barmode = "overlay", xaxis=x, yaxis=y)
ihist
View(x)
# mean per month
meanofall <- squishdata %>%
group_by(Month) %>%
summarise(mean = mean(Temp, na.rm=TRUE))
# print the top 1
head(meanofall, n=1)
View(meanofall)
meanofall <- squishdata %>%
group_by(Month) %>%
summarise(mean = mean(Temp, na.rm=TRUE)) %>%
arrange(desc(Temp))
meanofall <- squishdata %>%
group_by(Month) %>%
summarise(mean = mean(Temp, na.rm=TRUE)) %>%
arrange(desc(mean))
View(meanofall)
# mean per month
meanofall <- squishdata %>%
group_by(Month) %>%
summarise(mean = mean(Temp, na.rm=TRUE))
# print the top 1
head(meanofall, n=1)
View(meanofall)
meanwholeyear=squishdata %>%
summarize(meanyear = mean(Temp, na.rm=TRUE))
View(meanwholeyear)
View(squishdata)
plot(meanwholeyear)
plot(squishdata)
ggplot()
ggplot(squishdata,aex(x=Temp,color=month,fill=month)) +
geom_histogram(position = "identity",alpha=0.5)+
labs(title="Ggplot2 histogram of Australian Jan and Jun
temperatures",
x="Temperature",
y="Frequency")
ggplot(squishdata,aes(x=Temp,color=month,fill=month)) +
geom_histogram(position="identity", alpha=0.5)+
geom_vline(data=meantwomonths,
aes(xintercept=mean,
color=Month),
linetype="dashed")
ggplot(squishdata,aes(x=Temp,color=month,fill=month)) +
geom_histogram(position="identity", alpha=0.5)
View(meantwomonths)
View(twomonths)
View(meanofall)
ggplot(meanofall, aes(x=Temp, color=Month, fill=Month)) +
geom_histogram(position="identity", alpha=0.5)
ggplot(meanofall, aes(x=mean, color=Month, fill=Month)) +
geom_histogram(position="identity", alpha=0.5)
plot(meanofall)
