library(spatstat)
library(here)
library(sp)
library(rgeos)
LondonBoroughs <- st_read(here::here("statistical-gis-boundaries-london",
"ESRI", "London_Borough_Excluding_MHW.shp"))
library(sf)
LondonBoroughs <- st_read(here::here("statistical-gis-boundaries-london",
"ESRI", "London_Borough_Excluding_MHW.shp"))
BoroughMap <- LondonBoroughs %>%
dplyr::filter(str_detect(GSS_CODE, "^E09"))%>%
st_transform(., 27700)
library(stringr)
BoroughMap <- LondonBoroughs %>%
dplyr::filter(str_detect(GSS_CODE, "^E09"))%>%
st_transform(., 27700)
qtm(BoroughMap)
library(tmap)
library(tmap)
##First, get the London Borough Boundaries
LondonBoroughs <- st_read(here::here("statistical-gis-boundaries-london",
"ESRI", "London_Borough_Excluding_MHW.shp"))
library(sf)
##First, get the London Borough Boundaries
LondonBoroughs <- st_read(here::here("statistical-gis-boundaries-london",
"ESRI", "London_Borough_Excluding_MHW.shp"))
library(stringr)
BoroughMap <- LondonBoroughs %>%
dplyr::filter(str_detect(GSS_CODE,"^E09") %>%
st_transform(.,27700)
BoroughMap <- LondonBoroughs %>%
dplyr::filter(str_detect(GSS_CODE, "^E09"))%>%
st_transform(., 27700)
qtm(BoroughMap)
library(tamp)
library(tmap)
?qtm
install.packages("tmap")
library(tmap)
BluePlaques <- st_read("https://s3.eu-west-2.amazonaws.com/openplaques/
open-plaques-london-2018-04-08.geojson") %>%
st_transform(.,27700)
BluePlaques <- st_read("https://s3.eu-west-2.amazonaws.com/openplaques/
open-plaques-london-2018-04-08.geojson")
library(sf)
BluePlaques <- st_read("https://s3.eu-west-2.amazonaws.com/openplaques/
open-plaques-london-2018-04-08.geojson")
BluePlaques <- st_read("https://s3.eu-west-2.amazonaws.com/openplaques/
open-plaques-london-2018-04-08.geojson")
BluePlaques <- st_read("https://s3.eu-west-2.amazonaws.com/openplaques/
open-plaques-london-2018-04-08.geojson")
OSM <- st_read(here::here("greater-london-latest-free.shp",
"gis_osm_pois_a_free_1.shp")) %>%
st_transform(., 27700) %>%
#select hotels only
filter(fclass == 'hotel')
OSM <- st_read(here::here("greater-london-latest-free.shp",
"gis_osm_pois_a_free_1.shp")) %>%
st_transform(., 27700) %>%
#select hotels only
filter(fclass == 'hotel')
library(sf)
OSM <- st_read(here::here("greater-london-latest-free.shp",
"gis_osm_pois_a_free_1.shp")) %>%
st_transform(., 27700) %>%
#select hotels only
filter(fclass == 'hotel')
library(spatstat)
#Now get the location of all Blue Plaques in the City direct from the web
BluePlaques <- st_read("https://s3.eu-west-2.amazonaws.com/openplaques/
open-plaques-london-2018-04-08.geojson") %>%
st_transform(.,27700)
BluePlaques <- st_read("https://s3.eu-west-2.amazonaws.com/openplaques/
open-plaques-london-2018-04-08.geojson")
BluePlaques <- st_read("https://s3.eu-west-2.amazonaws.com/openplaques/open-plaques-london-2018-04-08.geojson")
summary(BluePlaques)
library(tmap)
library(tmap)
qtm(BoroughMap)
#plot the blue plaques in the city
tmap_mode("plot")
tm_shape(BoroughMap) +
tm_polygons(col = NA, alpha = 0.5) +
tm_shape(BluePlaques) +
tm_dots(col = "blue")
BluePlaques <- distinct(BluePlaques)
library(dplyr)
library(tidyverse)
library(dplyr)
BluePlaques <- distinct(BluePlaques)
BluePlaquesSub <- BluePlaques[BoroughMap,]
st_transform(BluePlaques,27700)
BluePlaquesSub <- BluePlaques[BoroughMap,]
BoroughMap
tmap_mode("plot")
tm_shape(BoroughMap) +
tm_polygons(col = NA, alpha = 0.5) +
tm_shape(BluePlaques) +
tm_dots(col = "blue")
#Spatial subsetting   just select the points inside London
BluePlaquesSub <- BluePlaques[BoroughMap,]
st_crs(BluePlaques)
st_crs(BoroughMap)
BluePlaques %>%  st_transform(.,27700)
#Spatial subsetting   just select the points inside London
BluePlaquesSub <- BluePlaques[BoroughMap,]
library(tidyverse)
library(sf)
BluePlaques <- distinct(BluePlaques)
BluePlaquesSub <- BluePlaques[BoroughMap,]
BoroughMap
BluePlaques
BluePlaques %>%
st_transform(.,27700)
BluePlaquesSub <- BluePlaques[BoroughMap,]
BluePlaques
BluePlaques <- st_read(here::here("prac6_data",
"open-plaques-london-2018-04-08.geojson")) %>%
st_transform(.,27700)
View(BluePlaques)
BluePlaques <- st_read(here::here("prac6_data",
"open-plaques-london-2018-04-08.geojson")) %>%
st_set_crs(.,27700)
library(spatstat)
library(here)
library(sp)
library(rgeos)
install.packages("regeos")
library(maptools)
install.packages("maptools")
library(tmap)
library(sf)
library(geojson)
library(geojsonio)
library(tmaptools)
install.packages("geojson")
library(geojson)
library(geojsonio)
library(tidyverse)
library(tmap)
remotes::install_github('r-tmap/tmap')
library(tmap)
library(spatstat)
library(here)
library(sp)
#library(rgeos)
#library(maptools)
library(tmap)
library(sf)
library(geojson)
library(geojsonio)
library(tmaptools)
##First, get the London Borough Boundaries
LondonBoroughs <- st_read(here::here("statistical-gis-boundaries-london",
"ESRI", "London_Borough_Excluding_MHW.shp"))
library(spatstat)
library(here)
library(sp)
#library(rgeos)
#library(maptools)
library(tmap)
library(sf)
library(geojson)
library(geojsonio)
library(tmaptools)
##First, get the London Borough Boundaries
LondonBoroughs <- st_read(here::here("statistical-gis-boundaries-london",
"ESRI", "London_Borough_Excluding_MHW.shp"))
library(stringr)
BoroughMap <- LondonBoroughs %>%
dplyr::filter(str_detect(GSS_CODE, "^E09"))%>%
st_transform(., 27700)
qtm(BoroughMap)
#Now get the location of all Blue Plaques in the City direct from the web
BluePlaques <- st_read("https://s3.eu-west-2.amazonaws.com/openplaques/
open-plaques-london-2018-04-08.geojson") %>%
st_transform(.,27700)
BluePlaques <- st_read("https://s3.eu-west-2.amazonaws.com/openplaques/open-plaques-london-2018-04-08.geojson") %>%
st_transform(.,27700)
summary(BluePlaques)
BluePlaques
#plot the blue plaques in the city
tmap_mode("plot")
tm_shape(BoroughMap) +
tm_polygons(col = NA, alpha = 0.5) +
tm_shape(BluePlaques) +
tm_dots(col = "blue")
#remove duplicates
library(tidyverse)
library(sf)
BluePlaques <- distinct(BluePlaques)
#Spatial subsetting   just select the points inside London
BluePlaquesSub <- BluePlaques[BoroughMap,]
tmap_mode("plot")
tm_shape(BoroughMap) +
tm_polygons(col = NA, alpha = 0.5) +
tm_shape(BluePlaquesSub) +
tm_dots(col = "blue")
intersect_indices <-st_intersects(BoroughMap, BluePlaques)
View(intersect_indices)
class(intersect_indices)
class(BluePlaquesSub)
plot(intersect_indices)
tm_shape(intersect_indices)
intersect_indices
Londonborough <- st_read(here::here("statistical-gis-boundaries-london",
"ESRI", "London_Borough_Excluding_MHW.shp")) %>%
st_transform(.,27700)
join_example <-  st_join(OSM, Londonborough)
OSM <- st_read(here::here("greater-london-latest-free.shp",
"gis_osm_pois_a_free_1.shp")) %>%
st_transform(., 27700) %>%
#select hotels only
filter(fclass == 'hotel')
osm
OSM
join_example <-  st_join(OSM, Londonborough)
nrow(join_example)
plot(join_example)
View(join_example)
plot(Londonborough)
tm_shape(Londonborough) +
tm_polygons(col = "red", alpha=0.5)+
tm_shape(OSM) +
tm_dots(col = "blue")
Airbnb <- read_csv("listings.csv") %>%
st_as_sf(., coords = c("longitude", "latitude"),
crs = 4326) %>%
st_transform(., 27700)%>%
#select entire places that are available all year
filter(room_type == 'Entire home/apt' & availability_365 =='365')
View(Airbnb)
Airbnb <- read_csv("listings.csv")
View(Airbnb)
class(Airbnb)
Airbnb
Airbnb <- read_csv("listings.csv") %>%
st_as_sf(., coords = c("longitude", "latitude"),
crs = 4326) %>%
st_transform(., 27700)%>%
#select entire places that are available all year
filter(room_type == 'Entire home/apt' & availability_365 =='365')
Airbnb
View(Airbnb)
Joinfun <- function(data1, data2){
output<- data1%>%
st_join(Londonborough,.) %>%
add_count(GSS_CODE, name="hotels_in_borough")
return(output)
}
View(Joinfun)
# use the function for hotels
Hotels <- Joinfun(OSM, Londonborough)
View(Hotels)
View(OSM)
View(Londonborough)
# then for airbnb
Airbnb <- Joinfun(Airbnb, Londonborough)
Hotels <- Hotels %>%
#at the moment each hotel is a row for the borough
#we just one one row that has number of airbnbs
group_by(., GSS_CODE, NAME)%>%
summarise(`Accomodation count` = unique(hotels_in_borough))
View(Hotels)
Airbnb <- Airbnb %>%
group_by(.,GSS_CODE,NAME) %>%
summarise('Acommodation count' = unique(hotles_in_borough))
Airbnb <- Airbnb %>%
group_by(., GSS_CODE, NAME)%>%
summarise(`Accomodation count` = unique(hotels_in_borough))
View(Airbnb)
all_accomodation <- st_join(Hotels, Airbnb)
head(all_accomodation)
View(all_accomodation)
View(Airbnb)
all_accomodation <- st_join(Hotels, Airbnb, join = st_equals)
head(all_accomodation)
View(all_accomodation)
all_accomodation <- st_join(Hotels, Airbnb)
head(all_accomodation)
View(all_accomodation)
all_accomodation1 <- st_join(Hotels, Airbnb, join = st_equals)
head(all_accomodation)
View(all_accomodation)
View(all_accomodation1)
all_accomodation <- st_join(Hotels, Airbnb, join = st_equals)
head(all_accomodation)
View(BluePlaques)
rm(all_accomodation1)
all_accomodation <- st_join(Hotels, Airbnb)
head(all_accomodation)
View(all_accomodation)
# st_equals() that returns the data based on the same geometries (or polygons)â€¦.
all_accomodation <- st_join(Hotels, Airbnb, join = st_equals)
head(all_accomodation)
View(all_accomodation)
View(join_example)
View(all_accomodation)
join_example2 <-  st_join(OSM, Londonborough, join = st_equals)
View(join_example)
View(join_example)
Harrow <- BoroughMap %>%
filter(., NAME=="Harrow")
plot(Harrow)
tm_shape(Harrow)+
tm_polygons(col = "red", alpha = 0.5)
#Check to see that the correct borough has been pulled out
tm_shape(Harrow) +
tm_polygons(col = NA, alpha = 0.5)
#clip the data to our single borough
BluePlaquesSub <- BluePlaques[Harrow,]
#check that it's worked
tmap_mode("plot")
tm_shape(Harrow) +
tm_polygons(col = NA, alpha = 0.5) +
tm_shape(BluePlaquesSub) +
tm_dots(col = "blue")
library(spatstat)
window <- as.owin(Harrow)
plot(window)
?as(., 'Spatial')
BluePlaquesSub
View(BluePlaquesSub)
class(BluePlaquesSub)
BluePlaquesSub<- BluePlaquesSub %>%
as(., 'Spatial')
class(BluePlaquesSub)
View(BluePlaquesSub)
BluePlaquesSub@coords[,1]
#create a ppp object
BluePlaquesSub.ppp <- ppp(x=BluePlaquesSub@coords[,1],
y=BluePlaquesSub@coords[,2],
window=window)
BluePlaquesSub@coords[,1] #coordsçš„ç¬¬ä¸€åˆ—
#Have a look at the new ppp object
BluePlaquesSub.ppp %>%
plot(.,pch=16,cex=0.5,
main="Blue Plaques Harrow")
library(OpenStreetMap)
class(BluePlaquesSub.ppp)
class(BluePlaquesSub)
BluePlaques %>%
density(., sigma=500) %>%
plot()
BluePlaquesSub %>%
density(., sigma=500) %>%
plot()
BluePlaquesSub.ppp %>%
density(., sigma=500) %>%
plot()
plot(BluePlaquesSub.ppp,
pch=16,
cex=0.5,
main="Blue Plaques in Harrow")
plot(BluePlaquesSub.ppp,
pch=6,
cex=0.5,
main="Blue Plaques in Harrow")
plot(BluePlaquesSub.ppp,
pch=1,
cex=0.5,
main="Blue Plaques in Harrow")
plot(BluePlaquesSub.ppp,
pch=116,
cex=0.5,
main="Blue Plaques in Harrow")
plot(BluePlaquesSub.ppp,
pch=16,
cex=0.5,
main="Blue Plaques in Harrow")
plot(BluePlaquesSub.ppp,
pch=16,
cex=1,
main="Blue Plaques in Harrow")
plot(BluePlaquesSub.ppp,
pch=16,
cex=0.5,
main="Blue Plaques in Harrow")
BluePlaquesSub.ppp %>%
quadratcount(.,nx = 6, ny = 6)%>%
plot(., add=T, col="red")
BluePlaquesSub.ppp %>%
quadratcount(.,nx = 6, ny = 6)%>%
plot(., add=T, col="red")
plot(BluePlaquesSub.ppp,
pch=16,
cex=0.5,
main="Blue Plaques in Harrow")
BluePlaquesSub.ppp %>%
quadratcount(.,nx = 16, ny = 16)%>%
plot(., add=T, col="red")
BluePlaquesSub.ppp %>%
quadratcount(.,nx = 6, ny = 6)%>%
plot(., add=T, col="red")
plot(BluePlaquesSub.ppp,
pch=16,
cex=0.5,
main="Blue Plaques in Harrow")
#now count the points in that fall in a 6 x 6
#grid overlaid across the windowBluePlaquesSub.ppp2<-BluePlaquesSub.ppp %>%
BluePlaquesSub.ppp %>%
quadratcount(.,nx = 6, ny = 6)%>%
plot(., add=T, col="red")
View(BluePlaquesSub.ppp)
Qcount <- BluePlaquesSub.ppp %>%
quadratcount(.,nx = 6, ny = 6) %>%
as.data.frame()
View(Qcount)
Qcount <- BluePlaquesSub.ppp %>%
quadratcount(.,nx = 6, ny = 6) %>%
as.data.frame() %>%
dplyr::count(Var1=Freq)
View(OSM)
View(Qcount)
Qcount <- BluePlaquesSub.ppp %>%
quadratcount(.,nx = 6, ny = 6) %>%
as.data.frame()
View(Qcount)
Qcount <- BluePlaquesSub.ppp %>%
quadratcount(.,nx = 6, ny = 6) %>%
as.data.frame() %>%
dplyr::count(Var1=Freq)
View(Qcount)
Qcount <- BluePlaquesSub.ppp %>%
quadratcount(.,nx = 6, ny = 6) %>%
as.data.frame() %>%
dplyr::count(Var1=Freq)%>%
dplyr::rename(Freqquadratcount=n)
View(Qcount)
Qcount %>%
summarise_all(class)
sums <- Qcount %>%
#calculate the total blue plaques (Var * Freq)
mutate(total = Var1 * Freqquadratcount)
View(sums)
sums <- Qcount %>%
#calculate the total blue plaques (Var * Freq)
mutate(total = Var1 * Freqquadratcount) %>%
dplyr::summarise(across(everything(), sum))
View(sums)
sums <- Qcount %>%
#calculate the total blue plaques (Var * Freq)
mutate(total = Var1 * Freqquadratcount) %>%
dplyr::summarise(across(everything(), sum))%>%
dplyr::select(!Var1)
View(sums)
lambda<- Qcount%>%
#calculate lambda
mutate(total = Var1 * Freqquadratcount)%>%
dplyr::summarise(across(everything(), sum)) %>%
mutate(lambda=total/Freqquadratcount) %>%
dplyr::select(lambda)%>%
pull(lambda)
lambda<- Qcount%>%
#calculate lambda
mutate(total = Var1 * Freqquadratcount)%>%
dplyr::summarise(across(everything(), sum)) %>%
mutate(lambda=total/Freqquadratcount) %>%
dplyr::select(lambda)
lambda<- Qcount%>%
#calculate lambda
mutate(total = Var1 * Freqquadratcount)%>%
dplyr::summarise(across(everything(), sum)) %>%
mutate(lambda=total/Freqquadratcount) %>%
dplyr::select(lambda)%>%
pull(lambda)
?pull
QCountTable <- Qcount %>%
mutate(Pr=((lambda^Var1)*exp(-lambda))/factorial(Var1))%>%
#now calculate the expected counts based on our total number of plaques
#and save them to the table
mutate(Expected= (round(Pr * sums$Freqquadratcount, 0)))
QCountTable <- Qcount %>%
mutate(Pr=((lambda^Var1)*exp(-lambda))/factorial(Var1))%>%
#now calculate the expected counts based on our total number of plaques
#and save them to the table
mutate(Expected= (round(Pr * sums$Freqquadratcount, 0)))
View(QCountTable)
View(sums)
#Compare the frequency distributions of the observed and expected point patterns
plot(c(1,5),c(0,14), type="n",
xlab="Number of Blue Plaques (Red=Observed,Blue=Expected)",
ylab="Frequency of Occurances")
points(QCountTable$Freqquadratcount,
col="Red",
type="o",
lwd=3)
points(QCountTable$Expected,
col="Blue",
type="o",
lwd=3)
teststats <- quadrat.test(BluePlaquesSub.ppp, nx = 6, ny = 6)
View(teststats)
plot(BluePlaquesSub.ppp,pch=16,cex=0.5, main="Blue Plaques in Harrow")
plot(teststats, add=T, col = "red")
plot(BluePlaquesSub.ppp,pch=16,cex=0.5, main="Blue Plaques in Harrow")
plot(teststats, add=T, col = "red")
class(teststats)
K <- BluePlaquesSub.ppp %>%
Kest(., correction="border") %>%
plot()
Kval <- as.data.frame(Kest(BluePlaquesSub.ppp, correction = "Ripley"))
View(K)
View(Kval)
class(k)
class(K)
