names(mycsv)
sum_mycsv <- myscv %>%
group_by("County") %>%
summarise(total_expected_count_to_test = sum("Count of students expected to test including previously passed", na.rm = TRUE),
total_passed_count = sum("CountMetStandard"), na.rm = TRUE)
sum_mycsv <- mycsv %>%
group_by("County") %>%
summarise(total_expected_count_to_test = sum("Count of students expected to test including previously passed", na.rm = TRUE),
total_passed_count = sum("CountMetStandard"), na.rm = TRUE)
library(sf)
sum_mycsv <- mycsv %>%
group_by("County") %>%
summarise(total_expected_count_to_test = sum("Count of students expected to test including previously passed", na.rm = TRUE),
total_passed_count = sum("CountMetStandard"), na.rm = TRUE)
rlang::last_trace()
sum_mycsv <- mycsv %>%
group_by("County") %>%
summarise(
total_expected_count_to_test = sum("Count of students expected to test including previously passed", na.rm = TRUE),
total_passed_count = sum("CountMetStandard", na.rm = TRUE))
sum_mycsv <- mycsv %>%
group_by("County") %>%
summarise(
total_expected_count_to_test = sum(`Count of students expected to test including previously passed`, na.rm = TRUE),
total_passed_count = sum(`CountMetStandard`, na.rm = TRUE))
sum_mycsv <- mycsv %>%
group_by(County) %>%
summarise(
total_expected_count_to_test = sum(`Count of students expected to test including previously passed`, na.rm = TRUE),
total_passed_count = sum(`CountMetStandard`, na.rm = TRUE))
summary(mycsv)
sum_mycsv <- mycsv %>%
# 如果有需要先将列转换为数值型
mutate(
`Count of students expected to test including previously passed` = as.numeric(`Count of students expected to test including previously passed`),
CountMetStandard = as.numeric(CountMetStandard)
)
View(sum_mycsv)
summary(sum_mycsv)
sum_mycsv <- mycsv %>%
# 如果有需要先将列转换为数值型
mutate(
`Count of students expected to test including previously passed` = as.numeric(`Count of students expected to test including previously passed`),
CountMetStandard = as.numeric(CountMetStandard)
) %>%
group_by(County) %>%
summarise(
total_expected_count_to_test = sum(`Count of students expected to test including previously passed`, na.rm = TRUE),
total_passed_count = sum(CountMetStandard, na.rm = TRUE)
)
View(sum_mycsv)
View(sum_mycsv)
shape %>%
shape_merge <- shape %>%
merge(.,)
names(shape)
shape_merge <- shape %>%
merge(.,
by.x="COUNTYLABE",
by.y="County")
shape_merge <- shape %>%
merge(.,
sum_mycsv
by.x="COUNTYLABE",
shape_merge <- shape %>%
merge(.,
sum_mycsv,
by.x="COUNTYLABE",
by.y="County")
View(shape_merge)
names(shape_merge)
shape_merge %>%
mutate( meeting_rate = total_passed_count/total_expected_count_to_test)
View(shape_merge)
shape_merge %>%
mutate(., meeting_rate = total_passed_count/total_expected_count_to_test)
shape_merge %>%
mutate(meeting_rate = total_passed_count/total_expected_count_to_test)
View(shape_merge)
shape_merge <- shape_merge %>%
mutate(meeting_rate = total_passed_count/total_expected_count_to_test)
View(shape_merge)
library(tmap)
# 绘制地图并根据 meeting_rate 进行颜色填充
tm_shape(shape_merge) +
tm_polygons("meeting_rate", title = "Meeting Rate", palette = "blue") +
tm_layout(title = "Meeting Rate by Region")
tm_shape(shape_merge) +
tm_polygons("meeting_rate", title = "Meeting Rate", palette = "red") +
tm_layout(title = "Meeting Rate by Region")
tm_shape(shape_merge) +
tm_polygons(
"meeting_rate",
title = "Meeting Rate",
palette = "red"
breaks = seq(0.29, 0.66, length.out = 5) # 定义渐变范围为0.29到0.66，分为5个层级
tm_shape(shape_merge) +
tm_polygons(
"meeting_rate",
title = "Meeting Rate",
palette = "red",
breaks = seq(0.29, 0.66, length.out = 5) # 定义渐变范围为0.29到0.66，分为5个层级
) +
tm_layout(title = "Meeting Rate by Region")
# 绘制地图并根据 meeting_rate 进行颜色填充
tm_shape(shape_merge) +
tm_polygons(
"meeting_rate",
title = "Meeting Rate",
palette = "YlOrRd", # 黄色到红色渐变调色板
breaks = seq(0.29, 0.66, length.out = 5) # 定义渐变范围为0.29到0.66，分为5个层级
) +
tm_layout(title = "Meeting Rate by Region")
tm_shape(shape_merge) +
tm_polygons(
"meeting_rate",
title = "Meeting Rate",
palette = "YlOrRd", # 黄色到红色渐变调色板
breaks = seq(0.29, 0.66, length.out = 10) # 定义渐变范围为0.29到0.66，分为5个层级
) +
tm_layout(title = "Meeting Rate by Region")
library(sf)
library(tidyverse)
shape <- st_read("Washington_Counties_with_Natural_Shoreline___washsh_area/Washington_Counties_with_Natural_Shoreline___washsh_area.shp")
plot(shape)
shape %>%
st_geometry() %>%
st_simplify(., dTolerance = 1000) %>%
plot()
mycsv <- read_csv("Report_Card_Assessment_Data_2018-19_School_Year_20241003.csv")
sum_mycsv <- mycsv %>%
# 如果有需要先将列转换为数值型
mutate(
`Count of students expected to test including previously passed` = as.numeric(`Count of students expected to test including previously passed`),
CountMetStandard = as.numeric(CountMetStandard)
) %>%
group_by(County) %>%
summarise(
total_expected_count_to_test = sum(`Count of students expected to test including previously passed`, na.rm = TRUE),
total_passed_count = sum(CountMetStandard, na.rm = TRUE)
)
shape_merge <- shape %>%
merge(.,
sum_mycsv,
by.x="COUNTYLABE",
by.y="County")
shape_merge <- shape_merge %>%
mutate(meeting_rate = total_passed_count/total_expected_count_to_test)
#渲染
library(tmap)
# 绘制地图并根据 meeting_rate 进行颜色填充
tm_shape(shape_merge) +
tm_polygons(
"meeting_rate",
title = "Meeting Rate",
palette = "YlOrRd", # 黄色到红色渐变调色板
breaks = seq(0.29, 0.66, length.out = 10) # 定义渐变范围为0.29到0.66，分为5个层级
) +
tm_layout(title = "Meeting Rate by Region")
library(tmap)
library(tmaptools)
# this first bit of code is the same as in the practical documentation
tmap_mode("plot")
qtm(BoroughDataMap,
fill = "rate_of_job_seekers_allowance_jsa_claimants_2015")
?st_read()
?read_csv
type(mycsv)
typeof(mycsv)
class(mycsv)
names(mycsv)
View(shape)
View(shape_merge)
tm_shape(shape_merge) +
tm_polygons(
"meeting_rate",
title = "Meeting Rate",
palette = "YlOrRd", # 黄色到红色渐变调色板
breaks = seq(0.29, 0.66, length.out = 10) # 定义渐变范围为0.29到0.66，分为5个层级
)
class(shape)
tm_shape(shape_merge) +
tm_polygons(
title = "Meeting Rate",
palette = "YlOrRd", # 黄色到红色渐变调色板
breaks = seq(0.29, 0.66, length.out = 10) # 定义渐变范围为0.29到0.66，分为5个层级
)
#渲染
library(tmap)
# 绘制地图并根据 meeting_rate 进行颜色填充
tm_shape(shape_merge) +
tm_polygons(
"meeting_rate",
title = "Meeting Rate",
palette = "YlOrRd", # 黄色到红色渐变调色板
breaks = seq(0.29, 0.66, length.out = 10) # 定义渐变范围为0.29到0.66，分为5个层级
) +
tm_layout(title = "Meeting Rate by Region")
?tm_polygons
View(sum_mycsv)
View(shape_merge)
library(tmap)
# 绘制地图并根据 meeting_rate 进行颜色填充
tm_shape(shape_merge) +
tm_polygons(
"meeting_rate",
title = "Meeting Rate",
palette = "YlOrRd", # 黄色到红色渐变调色板
breaks = seq(0.29, 0.66, length.out = 6) # 定义渐变范围为0.29到0.66，分为5个层级
) +
tm_layout(title = "Meeting Rate by Region")
spec(mycsv)
print(mycsv)
summary(mycsv)
shape
print(shape)
?as.numeric
?as.numeric()
View(sum_mycsv)
source("C:/Users/YU/Desktop/CASA0005/wk2/Practice/script.R", echo=TRUE)
shape_merge <- shape_merge %>%
mutate(meeting_rate = total_passed_count/total_expected_count_to_test,
meeting_rate_compare = case_when(meeting_rate) > mean(meeting_rate) ~ "above",
case_when(meeting_rate) = mean(meeting_rate) ~ "equal",
shape_merge <- shape_merge %>%
mutate(meeting_rate = total_passed_count/total_expected_count_to_test,
meeting_rate_compare = case_when(meeting_rate > mean(meeting_rate) ~ "above",
meeting_rate = mean(meeting_rate) ~ "equal",
TRUE ~ "below")
)
shape_merge <- shape_merge %>%
mutate(meeting_rate = total_passed_count/total_expected_count_to_test,
meeting_rate_compare = case_when(meeting_rate > mean(meeting_rate) ~ "above",
meeting_rate == mean(meeting_rate) ~ "equal",
TRUE ~ "below")
)
View(shape_merge)
mean(shape_merge$meeting_rate)
shape_merge$meeting_rate_compare
mycsv <- read_csv("Report_Card_Assessment_Data_2018-19_School_Year_20241003.csv", na="NULL")
mycsv <- read_csv("Report_Card_Assessment_Data_2018-19_School_Year_20241003.csv", na="NULL")
View(mycsv)
Datatypelist <- mycsv %>%
summarise_all(class) %>%
pivot_longer(everything(),
names_to = "All_variables",
values_to = "Variable_class")
Datatypelist
View(Datatypelist)
# packages
library(tidyverse)
library(here)
library(sf)
library(janitor)
library(tmap)
# packages
library(tidyverse)
library(here)
library(sf)
library(janitor)
library(tmap)
# read
report <- read_csv(here::here("homework_2",
"Report_Card_Assessment_Data_2018-19_School_Year.csv"),
na= "NULL")
# read
report <- read_csv(here::here("Report_Card_Assessment_Data_2018-19_School_Year.csv"),na= "NULL")
# read
report <- read_csv(here::here("Report_Card_Assessment_Data_2018-19_School_Year_20241003.csv"),na= "NULL")
shape <- st_read(here::here(      "Washington_Counties_with_Natural_Shoreline___washsh_area",                           "Washington_Counties_with_Natural_Shoreline___washsh_area.shp"))
# packages
library(tidyverse)
library(here)
library(sf)
library(janitor)
library(tmap)
# read
report <- read_csv(here::here("Report_Card_Assessment_Data_2018-19_School_Year_20241003.csv"),na= "NULL")
shape <- st_read(here::here(      "Washington_Counties_with_Natural_Shoreline___washsh_area",                           "Washington_Counties_with_Natural_Shoreline___washsh_area.shp"))
Datatypelist <- report %>%
summarise_all(class) %>%
pivot_longer(everything(),
names_to="All_variables",
values_to="Variable_class")
Datatypelist
county_only <- report %>%
clean_names(.) %>%
select(county, organization_level, test_subject, count_met_standard,
count_of_students_expected_to_test, grade_level)%>%
# the != means don't select this, but select everything else
# i could also filter on where
filter(county != "Multiple")%>%
filter(organization_level == "School")%>%
filter(test_subject == "Science")%>%
filter(grade_level=="All Grades")%>%
group_by(county)%>%
# we need to remove NAs - note we can use this function or do it within the summarise below with the argument na.rm=T they do the same thing!
na.omit()%>%
# na.rm = T means remove missing values from the data
# could also use na.omit or filter greater than 0
summarise(total_county_met_standard=sum(count_met_standard),
total_county_to_test=sum(count_of_students_expected_to_test))%>%
mutate(percent_met_per_county=(total_county_met_standard/total_county_to_test)*100)
state_average <- county_only%>%
mutate(sum_met=sum(total_county_met_standard))%>%
mutate(sum_to_test =sum(total_county_to_test))%>%
mutate(state_average=((sum_met/sum_to_test)*100))%>%
head(n=1)%>%
pull(state_average)
#or this works as well
state_average2 <- county_only %>%
summarise_at(c("total_county_met_standard", "total_county_to_test"), sum, na.rm = TRUE)%>%
mutate(state_average=((total_county_met_standard /total_county_to_test)*100))%>%
pull(state_average)
county_only_above_below_state <- county_only %>%
mutate(difference_to_state=(percent_met_per_county-state_average))%>%
mutate(across(difference_to_state , round, 0))%>%
mutate(above_below = case_when(difference_to_state<0 ~ "below",
difference_to_state>0 ~ "above",
difference_to_state==0 ~ "equal"
))
joined_data <- shape %>%
clean_names(.) %>%
left_join(.,
county_only_above_below_state,
by = c("countylabe" = "county"))
#bbox_county <- joined_data %>%
#  st_bbox(.) %>%
#  tmaptools::read_osm(., type = "osm", zoom = NULL)
#tm_shape(bbox_county)+
#  tm_rgb()+
tm_shape(joined_data) +
tm_polygons("above_below",
# style="pretty",
palette="Blues",
midpoint=NA,
#title="Number of years",
alpha = 0.5) +
tm_compass(position = c("left", "bottom"),type = "arrow") +
tm_scale_bar(position = c("left", "bottom")) +
tm_layout(title = "Counties above or below state avearge for science in all grades",
legend.position = c("right", "bottom"))
View(Datatypelist)
View(Datatypelist)
View(county_only)
View(report)
names(report)
View(Datatypelist)
View(county_only_above_below_state)
# packages
library(tidyverse)
library(here)
library(sf)
library(janitor)
library(tmap)
# read
report <- read_csv(here::here("Report_Card_Assessment_Data_2018-19_School_Year_20241003.csv"),na= "NULL")
shape <- st_read(here::here(      "Washington_Counties_with_Natural_Shoreline___washsh_area",                           "Washington_Counties_with_Natural_Shoreline___washsh_area.shp"))
Datatypelist <- report %>%
summarise_all(class) %>%
pivot_longer(everything(),
names_to='All_variables',
values_to='Variable_class')
View(Datatypelist)
Datatypelist <- report %>%
summarise(across(everything(), class)) %>%
pivot_longer(everything(),
names_to='All_variables',
values_to='Variable_class')
View(Datatypelist)
Datatypelist <- report %>%
summarise_all(class) %>%
pivot_longer(everything(),
names_to='All_variables',
values_to='Variable_class')
#or
Datatypelist <- report %>%
summarise(across(everything(), class)) %>%
pivot_longer(everything(),
names_to='All_variables',
values_to='Variable_class')
Datatypelist
county_only <- report %>%
clean_names(.) %>%
select(county, organization_level, test_subject, count_met_standard,
count_of_students_expected_to_test, grade_level)%>%
# the != means don't select this, but select everything else
# i could also filter on where
filter(county != "Multiple")%>%
filter(organization_level == "School")%>%
filter(test_subject == "Science")%>%
filter(grade_level=="All Grades")%>%
group_by(county)%>%
# we need to remove NAs - note we can use this function or do it within the summarise below with the argument na.rm=T they do the same thing!
na.omit()%>%
# na.rm = T means remove missing values from the data
# could also use na.omit or filter greater than 0
summarise(total_county_met_standard=sum(count_met_standard),
total_county_to_test=sum(count_of_students_expected_to_test))%>%
mutate(percent_met_per_county=(total_county_met_standard/total_county_to_test)*100)
View(county_only)
state_average <- county_only%>%
mutate(sum_met=sum(total_county_met_standard))%>%
mutate(sum_to_test =sum(total_county_to_test))%>%
mutate(state_average=((sum_met/sum_to_test)*100))%>%
head(n=1)%>%
pull(state_average)
state_average <- county_only%>%
mutate(sum_met=sum(total_county_met_standard))%>%
mutate(sum_to_test =sum(total_county_to_test))%>%
mutate(state_average=((sum_met/sum_to_test)*100))%>%
head(n=1)%>%
pull(state_average)
#or this works as well
state_average2 <- county_only %>%
summarise_at(c("total_county_met_standard", "total_county_to_test"), sum, na.rm = TRUE)%>%
mutate(state_average=((total_county_met_standard /total_county_to_test)*100))%>%
pull(state_average)
state_average3 <- county_only %>%
summarise(across(c("total_county_met_standard", "total_county_to_test"), sum, na.rm = TRUE)) %>%
mutate(state_average=((total_county_met_standard /total_country_to_test)*100))
state_average3 <- county_only %>%
summarise(across(c("total_county_met_standard", "total_county_to_test"), sum, na.rm = TRUE)) %>%
mutate(state_average=((total_county_met_standard /total_county_to_test)*100))
View(state_average3)
state_average3 <- county_only %>%
summarise(across(c("total_county_met_standard", "total_county_to_test"), sum, na.rm = TRUE)) %>%
mutate(state_average=((total_county_met_standard /total_county_to_test)*100)) %>%
pull(state_average)
county_only_above_below_state <- county_only %>%
mutate(difference_to_state=(percent_met_per_county-state_average))%>%
mutate(across(difference_to_state , round, 0))%>%
mutate(above_below = case_when(difference_to_state<0 ~ "below",
difference_to_state>0 ~ "above",
difference_to_state==0 ~ "equal"
))
county_only_above_below_state <- county_only %>%
mutate(difference_to_state=(percent_met_per_county-state_average)) %>%   mutate(across(difference_to_state, round, 0)) %>%
mutate(above_below = case_when(difference_to_state > 0 ~ "above",
difference_to_state == 0 ~ "equal",
difference_to_state < 0 ~ "below"
))
View(county_only_above_below_state)
joined_data <- shape %>%
clean_names(.) %>%
left_join(.,
county_only_above_below_state,
by = c("countylabe" = "county"))
class(joined_data)
View(joined_data)
tm_shape(joined_data) +
tm_polygons("above_below",
# style="pretty",
palette="Blues",
midpoint=NA,
#title="Number of years",
alpha = 0.5) +
tm_compass(position = c("left", "bottom"),type = "arrow") +
tm_scale_bar(position = c("left", "bottom")) +
tm_layout(title = "Counties above or below state avearge for science in all grades",
legend.position = c("right", "bottom"))
tm_shape(joined_data) +
tm_polygons("above_below",
# style="pretty",
palette="Blues",
midpoint=NA,
#title="Number of years",
alpha = 0.5) +
tm_compass(position = c("left", "bottom"),type = "star") +
tm_scale_bar(position = c("left", "bottom")) +
tm_layout(title = "Counties above or below state avearge for science in all grades", legend.position = c("right", "bottom"))
#bbox_county <- joined_data %>%
#  st_bbox(.) %>%
#  tmaptools::read_osm(., type = "osm", zoom = NULL)
#tm_shape(bbox_county)+
#  tm_rgb()+
tm_shape(joined_data) +
tm_polygons("above_below",
# style="pretty",
palette="Blues",
midpoint=NA,
#title="Number of years",
alpha = 0.5) +
tm_compass(position = c("left", "bottom"),type = "arrow") +
tm_scale_bar(position = c("left", "bottom")) +
tm_layout(title = "Counties above or below state avearge for science in all grades", legend.position = c("right", "bottom"))
tm_shape(joined_data) +
tm_polygons("above_below",
# style="pretty",
palette="Blues",
midpoint=NA,
#title="Number of years",
alpha = 0.5) +
tm_compass(position = c("left", "bottom"), type = "radar") +
tm_scale_bar(position = c("left", "bottom")) +
tm_layout(title = "Counties above or below state avearge for science in all grades", legend.position = c("right", "bottom"))
arrow
#bbox_county <- joined_data %>%
#  st_bbox(.) %>%
#  tmaptools::read_osm(., type = "osm", zoom = NULL)
#tm_shape(bbox_county)+
#  tm_rgb()+
tm_shape(joined_data) +
tm_polygons("above_below",
# style="pretty",
palette="Blues",
midpoint=NA,
#title="Number of years",
alpha = 0.5) +
tm_compass(position = c("left", "bottom"), type = "arrow") +
tm_scale_bar(position = c("left", "bottom")) +
tm_layout(title = "Counties above or below state avearge for science in all grades", legend.position = c("right", "bottom"))
